package com.epam.brest.course2015.social.dao;

import com.epam.brest.course2015.social.core.User;
import com.epam.brest.course2015.social.test.Logged;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

/**
 * Created by alexander on 25.10.15.
 */
public class UserDaoImpl implements UserDao {
    @Value("${user.selectAllUsers}")
    private String selectAllUsers;
    @Value("${user.selectAllUsersByDate}")
    private String getSelectAllUsersByDate;
    @Value("${user.selectById}")
    private String selectUserById;
    @Value("${user.selectByLogin}")
    private String selectUserByLogin;
    @Value("${user.deleteUser}")
    private String deleteUser;
    @Value("${user.addUser}")
    private String addUser;
    @Value("${user.changePassword}")
    private String changePassword;
    @Value("${user.changeLogin}")
    private String changeLogin;
    @Value("${user.changeFirstName}")
    private String changeFirstName;
    @Value("${user.changeLastName}")
    private String changeLastName;
    @Value("${friend.findFriends}")
    private String selectFriendship;
    @Value("${user.getCountOfUsers}")
    private String getCountOfUsers;
    @Value("${user.getCountOfUserFriends}")
    private String getCountOfUserFriends;

    private RowMapper<User> userMapper =
        new BeanPropertyRowMapper<>(User.class);

    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    /**
     *
     * Method adding a {@link User} to a DB. Creates a new record
     * to store information about a certain user
     *
     * @param user - an instance of a {@link User} object
     * @return a userId, generated by a {@link KeyHolder}
     */

    @Override
    @Logged
    public Integer addUser(User user) {
        KeyHolder keyHolder = new GeneratedKeyHolder();
        BeanPropertySqlParameterSource parameterSource =
                new BeanPropertySqlParameterSource(user);
        namedParameterJdbcTemplate.update(addUser,
                        parameterSource, keyHolder);
        return keyHolder.getKey().intValue();
    }

    @Override
    @Logged
    public void changePassword(Integer id, String password) {
        User user = new User();
        user.setUserId(id);
        user.setPassword(password);
        BeanPropertySqlParameterSource parameterSource =
                new BeanPropertySqlParameterSource(user);
        namedParameterJdbcTemplate.update(changePassword, parameterSource);
    }

    @Override
    @Logged
    public void changeLogin(Integer id, String login) {
        User user = new User();
        user.setLogin(login);
        user.setUserId(id);
        BeanPropertySqlParameterSource parameterSource =
                new BeanPropertySqlParameterSource(user);
        namedParameterJdbcTemplate.update(changeLogin, parameterSource);
    }

    @Override
    @Logged
    public void changeFirstName(Integer id, String firstName) {
        User user = new User();
        user.setFirstName(firstName);
        user.setUserId(id);
        BeanPropertySqlParameterSource source =
                new BeanPropertySqlParameterSource(user);
        namedParameterJdbcTemplate.update(changeFirstName, source);
    }

    @Override
    @Logged
    public void changeLastName(Integer id, String lastName) {
        User user = new User();
        user.setLastName(lastName);
        user.setUserId(id);
        BeanPropertySqlParameterSource source =
                new BeanPropertySqlParameterSource(user);
        namedParameterJdbcTemplate.update(changeLastName, source);
    }

    @Override
    @Logged
    public void deleteUser(Integer id) {
        SqlParameterSource parameterSource =
                new MapSqlParameterSource("userId", id);
        namedParameterJdbcTemplate
                .update(deleteUser, parameterSource);
    }

    @Override
    @Logged
    public List<User> getFriends(Integer id) {
        MapSqlParameterSource parameterSource =
                new MapSqlParameterSource("userId", id);
        return namedParameterJdbcTemplate.query(selectFriendship,
                                                parameterSource,
                                                userMapper);
    }

    @Override
    @Logged
    public List<User> getNoFriends(Integer id) {
        return null;
    }

    @Override
    @Logged
    public List<User> getAllUsers() {
        return namedParameterJdbcTemplate.query(selectAllUsers, userMapper);
    }

    @Override
    @Logged
    public List<User> getAllUsers(Date dateMin, Date dateMax) {
        MapSqlParameterSource parameterSource = new MapSqlParameterSource();
        parameterSource.addValue("dateMin", dateMin);
        parameterSource.addValue("dateMax", dateMax);
        return namedParameterJdbcTemplate.query(getSelectAllUsersByDate,
                                                parameterSource,
                                                userMapper);
    }

    @Override
    @Logged
    public User getUserById(Integer id) {
        SqlParameterSource paramSource =
                new MapSqlParameterSource("userId", id);
        return namedParameterJdbcTemplate.queryForObject(selectUserById,
                                                        paramSource,
                                                        userMapper);
    }

    @Override
    @Logged
    public User getUserByLogin(String login) {
        SqlParameterSource parameterSource =
                new MapSqlParameterSource("login", login);
        return namedParameterJdbcTemplate.queryForObject(selectUserByLogin,
                                                        parameterSource,
                                                        userMapper);
    }

    @Override
    @Logged
    public Integer getCountOfUsers() {
        SqlParameterSource parameterSource = new MapSqlParameterSource();
        return namedParameterJdbcTemplate.queryForObject(getCountOfUsers,
                                                         parameterSource,
                                                         Integer.class);
    }

    @Override
    @Logged
    public Integer getCountOfUserFriends(Integer id) {
        SqlParameterSource parameterSource =
                new MapSqlParameterSource("userId", id);
        return namedParameterJdbcTemplate.queryForObject(getCountOfUserFriends,
                                                         parameterSource,
                                                         Integer.class);
    }
}
